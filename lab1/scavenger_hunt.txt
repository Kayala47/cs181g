1. Instance is the 'package' you're using, PhysicalDevice would be the hardware it runs on,
 and they work together to create a Device object which you can run commands on.

2. It puts all available devices into a list, then filters out those that don't support 
functionality we need, then sorts based on a custom ranking from DiscreteGPU to CPU.

3. With a filter, you might not get any values. It returns an Optional value, and we call unwrap 
to get the actual value.

4. A Device represents a channel of communication with hardware, but is not hardware. You can use 
Device to call functions and write to the screen.

5. Queues are sets of instructions that go to the GPU. Instructions of the same type go in the 
same queue_family because we want to only pass in one type at a time

6. Swapchains solve the issue of CPU providing image at same time as GPU is displaying (tearing). 
Swapchain is mechanism for swapping out series of images

7. Vertex just seems to be two numbers, so probably x,y coordinates

8. It creates a buffer starting on line 221, and that's just three vertices put together. From what I 
understand, it then is passed into a command buffer, which can be passed to the GPU to perform the drawing.

9. The shader macro takes in a couple of string inputs: the type of shader, and then GLSL (a shading language) 
source code to compute the shader.

10. A renderpass describes one or more steps to render something on the screen. In our code, I think it is used to 
create the background color for the triangle to sit in front of.

11. A graphics pipeline holds together information about the vertices, the renderpass, and information about the shader
to define how a draw operation takes place.

12. I think this function is supposed to re-size the images sent to be drawn whenever the window size changes. 

13. So, I'm not sure. I know it stores the previous command issued to the GPU. I can't see the inside of cleanup_finished
but I'm assuming that returns the resources that need to be re-assigned. That makes sense bc of the match
statement later that holds different things based on the success of the draw.

14. I think these happen in lines 482-484. Those seem like a direct translation of the pipeline.

15. I think that happens in line 484 with the builder, who actually calls draw on the list of vertices. 

16. Partly, it joins the previous function with the new future, which I think tells it what resources are 
available and what part of the new future it can therefore draw. 